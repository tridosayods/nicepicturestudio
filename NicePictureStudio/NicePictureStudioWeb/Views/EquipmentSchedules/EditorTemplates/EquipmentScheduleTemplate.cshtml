@model NicePictureStudio.Models.EquipmentSchedulerViewModel

@{
    //required in order to render validation attributes
    ViewContext.FormContext = new FormContext();
}

    @functions{
        public Dictionary<string, object> generateDatePickerAttributes(
               string elementId,
               string fieldName,
               string dataBindAttribute,
               Dictionary<string, object> additionalAttributes = null)
        {

            Dictionary<string, object> datePickerAttributes = additionalAttributes != null ? new Dictionary<string, object>(additionalAttributes) : new Dictionary<string, object>();

            datePickerAttributes["id"] = elementId;
            datePickerAttributes["name"] = fieldName;
            datePickerAttributes["data-bind"] = dataBindAttribute;
            datePickerAttributes["required"] = "required";
            datePickerAttributes["style"] = "z-index: inherit;";
            datePickerAttributes["disabled"] = true;
            return datePickerAttributes;
        }
    }

<script type="text/javascript">

    
    $(document).ready(function () {
       
    });

    function getRemainValue()
    {
        var item = $(".IdRemain").val();
        $.ajax({
            url: '@Url.Action("GetRemainNumberFromDatabase", "EquipmentSchedules")',
            data: { id: item },
            type: "POST",
            success: function (data) { $(".RemainItem").replaceWith(data); }
        });
    }

    

</script>
@*@(Html.Kendo().Window()
    .Name("window")
    .Title("Rams's Ten Principles of Good Design")
        .HtmlAttributes(new { @class = "xxxx" })
    .Content(@<Text><div class="yyyy"></div></Text>)
    .Iframe(false)
    .Draggable()
    .AutoFocus(true)
    .Actions(actions=>actions.Refresh().Close())

)*@


    @Html.HiddenFor(model => model.EquipmentSetIndex, new { @class="EquipmentIndex"})
    @Html.HiddenFor(model => model.Id, new { @class = "IdRemain" })

    <div class="k-edit-label">
        @(Html.Label("ชื่ออุปกรณ์"))
    </div>
    <div data-container-for="title" class="k-edit-field">
        @(Html.TextBoxFor(model => model.Title, new { @class = "k-textbox", data_bind = "value:title", @readonly = "true",@Style="width:210px" }))
    </div>

    <div class="k-edit-label">
        @(Html.Label("เวลาเริ่มต้น"))
    </div>
    <div data-container-for="start" class="k-edit-field">

        @(Html.Kendo().DateTimePickerFor(model => model.Start)
        .HtmlAttributes(generateDatePickerAttributes("startDateTime", "start", "value:start,invisible:isAllDay")))

        @(Html.Kendo().DatePickerFor(model => model.Start)
        .HtmlAttributes(generateDatePickerAttributes("startDate", "start", "value:start,visible:isAllDay")))

        <span data-bind="text: startTimezone"></span>
        <span data-for="start" class="k-invalid-msg"></span>
    </div>

    <div class="k-edit-label">
        @(Html.Label("เวลาสิ้นสุด"))
    </div>
    <div data-container-for="end" class="k-edit-field">

        @(Html.Kendo().DateTimePickerFor(model => model.End)
        .HtmlAttributes(generateDatePickerAttributes(
            "endDateTime",
            "end",
            "value:end,invisible:isAllDay",
            new Dictionary<string, object>() { { "data-dateCompare-msg", "End date should be greater than or equal to the start date" } })))

        @(Html.Kendo().DatePickerFor(model => model.End)
        .HtmlAttributes(generateDatePickerAttributes(
            "endDate",
            "end",
            "value:end,visible:isAllDay",
            new Dictionary<string, object>() { { "data-dateCompare-msg", "End date should be greater than or equal to the start date" } })))

        <span data-bind="text: endTimezone"></span>
        <span data-for="end" class="k-invalid-msg"></span>
    </div>

    @*<div class="k-edit-label">
            @(Html.LabelFor(model => model.IsAllDay))
        </div>
        <div data-container-for="isAllDay" class="k-edit-field">
            <input data-bind="checked: isAllDay" data-val="true" id="IsAllDay" name="IsAllDay" type="checkbox" />
        </div>*@

    @*<div class="endTimezoneRow">
            <div class="k-edit-label"></div>
            <div class="k-edit-field">
                <label class="k-check">
                    <input checked="checked" class="k-timezone-toggle" type="checkbox" value="true" />
                    Use separate start and end time zones
                </label>
            </div>
        </div>*@

    <div class="k-edit-label">
        @(Html.Label("สถานะ"))
    </div>
    <div data-container-for="selectedStatus" class="k-edit-field">
        @(Html.Kendo().DropDownListFor(model => model.selectedStatus)
                        .HtmlAttributes(new { data_bind = "value:selectedStatus", style = "width: 210px" })
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .OptionLabel("None")
                    .ValuePrimitive(true)
                    .Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                             .BindTo(new[] {
                             new { Text = "รายการใหม่", Value = 1, Color = "\\#FE9A2E" },
                             new { Text = "แจ้งเตือน", Value = 6, Color = "\\#FF0000" },
                            new { Text = "ยืนยัน", Value = 2, Color = "\\#6eb3fa" },
                            new { Text = "เสร็จสิ้นการให้บริการ", Value = 3, Color = "\\#01DF01" },
                            new { Text = "ยกเลิก", Value = 4, Color = "\\#A4A4A4" },
                            new { Text = "ยกเลิกล่าช้ากว่ากำหนด", Value = 5, Color = "\\#A901DB" }
                        }).ToClientTemplate()
        )
    </div>

@*<div data-container-for="RemainItem" class="k-edit-field RemainItem">
        @(Html.TextBoxFor(model => model.RemainItem, new { @class = "k-textbox", data_bind = "value:RemainItem", @disabled = "true" }))
    </div>*@    
@*<div class="k-edit-label">
        @(Html.LabelFor(model => model.RemainItem))
    </div>
    <div data-container-for="RemainItem" class="k-edit-field RemainItem">
            @(Html.TextBox("RemainItem", @Model, new { @class = "k-textbox", data_bind = "value:RemainItem", @disabled = "true" }))
    </div>*@


        @*<div class="k-edit-label">
            @(Html.Label("รายละเอียด"))
        </div>
        <div data-container-for="description" class="k-edit-field">
            @(Html.TextAreaFor(model => model.Description, new { @class = "k-textbox", data_bind = "value:description" }))
        </div>*@
        <div class="k-edit-label">@Html.Label("รายละเอียด")</div>
        <div class="k-edit-field container">
            <button type="button" class="btn btn-default" id="btnDetail" onclick="modelOpen()"><span class="glyphicon glyphicon-book"></span>ดูรายละเอียด</button>
        </div>

        @*<script>
                $(".k-timezone-toggle").on("click", function () {
                    var isVisible = $(this).is(":checked");
                    var container = $(this).closest(".k-popup-edit-form");

                    var endTimezoneRow = container.find("label[for='EndTimezone']").parent().add(container.find("div[data-container-for='endTimezone']"));
                    endTimezoneRow.toggle(isVisible);

                    if (!isVisible) {
                        var uid = container.attr("data-uid");
                        var scheduler = $("\#scheduler").data("kendoScheduler");
                        var model = scheduler.dataSource.getByUid(uid);
                        model.set("endTimezone", null);
                    }
                });

                var endTimezone = '${data.endTimezone}';

                if (!endTimezone || endTimezone == "null") {
                    $(".k-timezone-toggle").trigger('click');
                }
            </script>

            <div class="k-edit-label">
                @(Html.LabelFor(model => model.StartTimezone))
            </div>
            <div data-container-for="startTimezone" class="k-edit-field">
                @(Html.Kendo().TimezoneEditorFor(model => model.StartTimezone)
                    .HtmlAttributes(new { data_bind = "value:startTimezone" }))
            </div>

            <div class="k-edit-label">
                @(Html.LabelFor(model => model.EndTimezone))
            </div>
            <div data-container-for="endTimezone" class="k-edit-field">
                @(Html.Kendo().TimezoneEditorFor(model => model.EndTimezone)
                    .HtmlAttributes(new { data_bind = "value:endTimezone" }))
            </div>

            <div class="k-edit-label">
                @(Html.LabelFor(model => model.RecurrenceRule))
            </div>
            <div data-container-for="recurrenceRule" class="k-edit-field">
                @(Html.Kendo().RecurrenceEditorFor(model => model.RecurrenceRule)
                    .HtmlAttributes(new { data_bind = "value:recurrenceRule" }))
            </div>



            <div class="k-edit-label">
                @(Html.LabelFor(model => model.RoomID))
            </div>
            <div data-container-for="RoomID" class="k-edit-field">
                @(Html.Kendo().DropDownListFor(model => model.RoomID)
                    .HtmlAttributes(new { data_bind = "value:RoomID", style = "width: 200px" })
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .OptionLabel("None")
                    .ValuePrimitive(true)
                    .Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                    .BindTo(new[] {
                            new { Text = "Meeting Room 101", Value = 1, Color = "\\#6eb3fa" },
                            new { Text = "Meeting Room 201", Value = 2, Color = "\\#f58a8a" }
                        }).ToClientTemplate()
                )
            </div>

            <div class="k-edit-label">
                @(Html.LabelFor(model => model.Attendees))
            </div>
            <div data-container-for="Attendees" class="k-edit-field">
                @(Html.Kendo().MultiSelectFor(model => model.Attendees)
                    .HtmlAttributes(new { data_bind = "value:Attendees" })
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .ValuePrimitive(true)
                    .TagTemplate("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                    .ItemTemplate("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
                    .BindTo(new[] {
                            new { Text = "Alex", Value = 1, Color = "\\#f8a398" },
                            new { Text = "Bob", Value = 2, Color = "\\#51a0ed" },
                            new { Text = "Charlie", Value = 3, Color = "\\#56ca85" }
                        })
                )
            </div>*@
        @{
        ViewContext.FormContext = null;
        }

